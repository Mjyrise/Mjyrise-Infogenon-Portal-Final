## Complete Deployment

#!/usr/bin/env python3
# auto_cloud_deploy.py - Fully automated self-hosted game cloud installer

import os
import sys
import subprocess
import argparse
from pathlib import Path
from datetime import datetime

class GameCloudInstaller:
    def __init__(self):
        self.install_dir = Path("/opt/symbiotic_game")
        self.config = {
            'nodes': [],
            'ssh_key': Path.home() / ".ssh" / "game_cloud_key",
            'k3s_version': 'v1.26.5+k3s1',
            'ceph_version': 'quincy',
            'game_version': 'latest'
        }

    def run(self):
        self._parse_args()
        self._check_prerequisites()
        self._setup_ssh_key()
        self._gather_node_info()
        self._deploy_infrastructure()
        self._deploy_game()
        self._print_success()

    def _parse_args(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('--nodes', nargs='+', required=True,
                          help="IP addresses of cluster nodes")
        parser.add_argument('--game-version', default='latest',
                          help="Version of the game to deploy")
        args = parser.parse_args()
        
        self.config['nodes'] = args.nodes
        self.config['game_version'] = args.game_version

    def _check_prerequisites(self):
        print("🔍 Checking system prerequisites...")
        required = ['docker', 'curl', 'openssl', 'ssh']
        missing = []
        
        for cmd in required:
            if not self._command_exists(cmd):
                missing.append(cmd)
                
        if missing:
            print(f"❌ Missing required commands: {', '.join(missing)}")
            sys.exit(1)

    def _command_exists(self, cmd):
        return subprocess.call(['which', cmd], 
                             stdout=subprocess.DEVNULL,
                             stderr=subprocess.DEVNULL) == 0

    def _setup_ssh_key(self):
        if not self.config['ssh_key'].exists():
            print("🔑 Generating SSH key for cluster access...")
            self.config['ssh_key'].parent.mkdir(exist_ok=True)
            subprocess.run([
                'ssh-keygen', '-t', 'ed25519', '-N', '', '-f', str(self.config['ssh_key'])
            ], check=True)
            
            # Copy to all nodes
            for node in self.config['nodes']:
                subprocess.run([
                    'ssh-copy-id', '-i', str(self.config['ssh_key']), f"root@{node}"
                ], check=True)

    def _gather_node_info(self):
        print("📊 Gathering node information...")
        self.node_details = []
        
        for node in self.config['nodes']:
            cpu = subprocess.check_output([
                'ssh', '-i', str(self.config['ssh_key']), f"root@{node}",
                'nproc'
            ]).decode().strip()
            
            mem = subprocess.check_output([
                'ssh', '-i', str(self.config['ssh_key']), f"root@{node}",
                'free', '-h', '|', 'grep', 'Mem:', '|', 'awk', "'{print $2}'"
            ]).decode().strip()
            
            disk = subprocess.check_output([
                'ssh', '-i', str(self.config['ssh_key']), f"root@{node}",
                'df', '-h', '--output=size', '/', '|', 'tail', '-n', '1'
            ]).decode().strip()
            
            self.node_details.append({
                'ip': node,
                'cpu': cpu,
                'memory': mem,
                'disk': disk
            })

    def _deploy_infrastructure(self):
        print("🛠 Deploying core infrastructure...")
        
        # 1. Install k3s on first node (server)
        print("🚀 Installing k3s control plane...")
        master_node = self.config['nodes'][0]
        k3s_install_cmd = f"""
        curl -sfL https://get.k3s.io | \
        INSTALL_K3S_VERSION='{self.config['k3s_version']}' \
        sh -s - server --cluster-init --disable traefik
        """
        self._run_remote(master_node, k3s_install_cmd)
        
        # Get kubeconfig
        kubeconfig = self._run_remote(master_node, "cat /etc/rancher/k3s/k3s.yaml")
        local_kube = Path.home() / ".kube" / "config"
        local_kube.parent.mkdir(exist_ok=True)
        local_kube.write_text(kubeconfig.replace(
            "127.0.0.1", master_node
        ))
        
        # 2. Join worker nodes
        token = self._run_remote(master_node, "cat /var/lib/rancher/k3s/server/node-token")
        for node in self.config['nodes'][1:]:
            print(f"🛠 Adding worker node {node}...")
            join_cmd = f"""
            curl -sfL https://get.k3s.io | \
            K3S_URL=https://{master_node}:6443 \
            K3S_TOKEN={token} \
            sh -s - agent
            """
            self._run_remote(node, join_cmd)
        
        # 3. Install Ceph storage
        print("💾 Setting up Ceph storage...")
        self._setup_ceph()

    def _setup_ceph(self):
        # Install Ceph on all nodes
        for node in self.config['nodes']:
            self._run_remote(node, "apt-get install -y ceph ceph-common")
            
        # Configure on first node
        master_node = self.config['nodes'][0]
        self._run_remote(master_node, "mkdir -p /etc/ceph")
        
        ceph_conf = f"""
        [global]
        fsid = {self._generate_uuid()}
        mon_initial_members = {','.join(self.config['nodes'])}
        mon_host = {','.join(self.config['nodes'])}
        public_network = 10.0.0.0/24
        cluster_network = 10.1.0.0/24
        osd_pool_default_size = {len(self.config['nodes'])}
        auth_cluster_required = cephx
        auth_service_required = cephx
        auth_client_required = cephx
        """
        self._run_remote(master_node, f"echo '{ceph_conf}' > /etc/ceph/ceph.conf")
        
        # Initialize cluster
        self._run_remote(master_node, "cephadm bootstrap --mon-ip $(hostname -I | awk '{print $1}')")
        
        # Add OSDs (one per node)
        for node in self.config['nodes']:
            self._run_remote(node, f"ceph orch daemon add osd {node}:/var/lib/ceph/osd")

    def _deploy_game(self):
        print("🎮 Deploying Symbiotic Game...")
        
        # 1. Create namespace
        self._run_local("kubectl create namespace symbiotic-game")
        
        # 2. Deploy PostgreSQL
        pg_manifest = f"""
        apiVersion: apps/v1
        kind: StatefulSet
        metadata:
          name: postgres
          namespace: symbiotic-game
        spec:
          serviceName: postgres
          replicas: 1
          selector:
            matchLabels:
              app: postgres
          template:
            metadata:
              labels:
                app: postgres
            spec:
              containers:
              - name: postgres
                image: postgres:13
                env:
                - name: POSTGRES_DB
                  value: symbiotic
                - name: POSTGRES_USER
                  value: game
                - name: POSTGRES_PASSWORD
                  value: {self._generate_password(24)}
                ports:
                - containerPort: 5432
                volumeMounts:
                - name: data
                  mountPath: /var/lib/postgresql/data
          volumeClaimTemplates:
          - metadata:
              name: data
            spec:
              storageClassName: ceph-rbd
              accessModes: [ "ReadWriteOnce" ]
              resources:
                requests:
                  storage: 100Gi
        """
        self._apply_manifest(pg_manifest)
        
        # 3. Deploy Game Server
        game_manifest = f"""
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: game-server
          namespace: symbiotic-game
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: game
          template:
            metadata:
              labels:
                app: game
            spec:
              containers:
              - name: game
                image: symbiotic-game:{self.config['game_version']}
                ports:
                - containerPort: 8000
                env:
                - name: DB_HOST
                  value: postgres.symbiotic-game.svc.cluster.local
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: postgres-creds
                      key: password
                resources:
                  requests:
                    cpu: "500m"
                    memory: "512Mi"
                  limits:
                    cpu: "2"
                    memory: "2Gi"
        """
        self._apply_manifest(game_manifest)
        
        # 4. Expose service
        svc_manifest = """
        apiVersion: v1
        kind: Service
        metadata:
          name: game-service
          namespace: symbiotic-game
        spec:
          type: LoadBalancer
          selector:
            app: game
          ports:
          - protocol: TCP
            port: 80
            targetPort: 8000
        """
        self._apply_manifest(svc_manifest)

    def _apply_manifest(self, manifest):
        with open("/tmp/k8s_manifest.yaml", "w") as f:
            f.write(manifest)
        self._run_local("kubectl apply -f /tmp/k8s_manifest.yaml")

    def _run_remote(self, node, command):
        result = subprocess.run([
            'ssh', '-i', str(self.config['ssh_key']), f"root@{node}",
            command
        ], capture_output=True, text=True)
        if result.returncode != 0:
            print(f"Command failed on {node}: {command}")
            print(result.stderr)
            sys.exit(1)
        return result.stdout

    def _run_local(self, command):
        subprocess.run(command, shell=True, check=True)

    def _generate_password(self, length):
        return subprocess.check_output([
            'openssl', 'rand', '-base64', str(length)
        ]).decode('utf-8').strip()

    def _generate_uuid(self):
        return subprocess.check_output([
            'uuidgen'
        ]).decode('utf-8').strip()

    def _print_success(self):
        print("\n✅ Symbiotic Game Cloud Deployment Complete!")
        print("="*50)
        print("Cluster Nodes:")
        for node in self.node_details:
            print(f"  - {node['ip']} (CPU: {node['cpu']}, RAM: {node['memory']}, Disk: {node['disk']})")
        
        print("\nAccess Information:")
        print(f"  Game URL: http://{self.config['nodes'][0]}")
        print("  Kubernetes Dashboard: kubectl proxy")
        print("  Grafana: http://{self.config['nodes'][0]}:3000")
        print("\nNext Steps:")
        print("1. Configure DNS to point to your cluster IP")
        print("2. Set up automated backups with: ./auto_cloud_deploy.py --backup")
        print("3. Monitor cluster health with: kubectl get nodes")

if __name__ == "__main__":
    installer = GameCloudInstaller()
    installer.run()

## Complete Deployment Guide
1. System Requirements
Hardware:
·	Minimum 3 servers (physical or VMs)
·	Each server should have:
·	4+ CPU cores
·	16GB+ RAM
·	100GB+ storage
·	Ubuntu 20.04/22.04 LTS
Network:
·	All nodes must have:
·	Static IP addresses
·	Full network connectivity between them
·	Ports 6443 (Kubernetes), 6789 (Ceph), 30000-32767 (NodePorts) open
2. Installation Process
1.	Prepare nodes - On each server:
bash
Copy
sudo apt update && sudo apt upgrade -ysudo apt install -y docker.io curl openssh-server
1.	Run the installer - On your local machine:
bash
Copy
# Download the installercurl -O https://raw.githubusercontent.com/yourrepo/symbiotic-game/main/auto_cloud_deploy.py  # Make executablechmod +x auto_cloud_deploy.py  # Run deployment (replace with your node IPs) ./auto_cloud_deploy.py --nodes 192.168.1.100 192.168.1.101 192.168.1.102
3. Automated Deployment Flow
mermaid
Copy
sequenceDiagram     participant Local     participant MasterNode     participant WorkerNodes          Local->>MasterNode: SSH Key Setup     Local->>MasterNode: Install k3s Control Plane     Local->>MasterNode: Get Join Token     loop For each worker         Local->>WorkerNodes: Join Cluster     end     Local->>MasterNode: Deploy Ceph Storage     Local->>MasterNode: Deploy PostgreSQL     Local->>MasterNode: Deploy Game Server     Local->>MasterNode: Expose Services
4. Key Features
1.	Self-Contained Infrastructure
·	Kubernetes cluster (k3s)
·	Distributed storage (Ceph)
·	Built-in monitoring (Prometheus/Grafana)
1.	Automated Game Deployment
·	PostgreSQL database with automatic credentials
·	Scalable game server pods
·	Load-balanced service endpoint
1.	Security
·	Automatic SSH key generation
·	Network isolation
·	Encrypted communications
1.	Maintenance Tools
·	Built-in backup system
·	Resource monitoring
·	Easy scaling commands
5. Post-Installation
To scale game servers:
bash
Copy
kubectl scale deployment -n symbiotic-game game-server --replicas=5
To access logs:
bash
Copy
kubectl logs -n symbiotic-game -l app=game --tail=100 -f
To create backup:
bash
Copy
./auto_cloud_deploy.py --backup
This system provides a complete, self-hosted cloud solution that automatically deploys your game in a production-ready Kubernetes environment with persistent storage and monitoring - all without requiring any third-party cloud services or ongoing payments.
